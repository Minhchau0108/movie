[{"/Volumes/Data/coderSchool/myReact/movie/src/index.js":"1","/Volumes/Data/coderSchool/myReact/movie/src/App.js":"2","/Volumes/Data/coderSchool/myReact/movie/src/reportWebVitals.js":"3","/Volumes/Data/coderSchool/myReact/movie/src/pages/MovieListPage.js":"4","/Volumes/Data/coderSchool/myReact/movie/src/pages/MovieDetailPage.js":"5","/Volumes/Data/coderSchool/myReact/movie/src/components/MovieDetail.js":"6","/Volumes/Data/coderSchool/myReact/movie/src/components/MovieCard.js":"7","/Volumes/Data/coderSchool/myReact/movie/src/components/GenreCheckBox.js":"8","/Volumes/Data/coderSchool/myReact/movie/src/components/CarouselMovie.js":"9","/Volumes/Data/coderSchool/myReact/movie/src/components/PublicNavbar.js":"10","/Volumes/Data/coderSchool/myReact/movie/src/components/PaginationBar.js":"11","/Volumes/Data/coderSchool/myReact/movie/src/components/ModalReviews.js":"12","/Volumes/Data/coderSchool/myReact/movie/src/components/NavBar.js":"13","/Volumes/Data/coderSchool/myReact/movie/src/components/CarouselMulti.js":"14"},{"size":586,"mtime":1610955017993,"results":"15","hashOfConfig":"16"},{"size":867,"mtime":1610955017992,"results":"17","hashOfConfig":"16"},{"size":362,"mtime":1610955017994,"results":"18","hashOfConfig":"16"},{"size":6744,"mtime":1610955017994,"results":"19","hashOfConfig":"16"},{"size":4387,"mtime":1610961465986,"results":"20","hashOfConfig":"16"},{"size":2103,"mtime":1610961751250,"results":"21","hashOfConfig":"16"},{"size":1865,"mtime":1610955017992,"results":"22","hashOfConfig":"16"},{"size":788,"mtime":1610955017992,"results":"23","hashOfConfig":"16"},{"size":720,"mtime":1610955017992,"results":"24","hashOfConfig":"16"},{"size":1239,"mtime":1610955017993,"results":"25","hashOfConfig":"16"},{"size":1466,"mtime":1610955017993,"results":"26","hashOfConfig":"16"},{"size":1663,"mtime":1610955017992,"results":"27","hashOfConfig":"16"},{"size":963,"mtime":1610955017993,"results":"28","hashOfConfig":"16"},{"size":1824,"mtime":1610955017992,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"s2jydq",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"/Volumes/Data/coderSchool/myReact/movie/src/index.js",[],["60","61"],"/Volumes/Data/coderSchool/myReact/movie/src/App.js",[],"/Volumes/Data/coderSchool/myReact/movie/src/reportWebVitals.js",[],"/Volumes/Data/coderSchool/myReact/movie/src/pages/MovieListPage.js",["62"],"import React, {useState, useEffect} from 'react'\nimport CarouselMovie from '../components/CarouselMovie';\nimport PublicNavbar from '../components/PublicNavbar'\nimport MovieCard from '../components/MovieCard'\nimport {CardDeck, Row, Col, Container} from \"react-bootstrap\";\nimport PaginationBar from '../components/PaginationBar';\nimport InputRange from 'react-input-range';\nimport 'react-input-range/lib/css/index.css';\nimport GenreCheckBox from '../components/GenreCheckBox'\n\n\nconst API_KEY=process.env.REACT_APP_TMDB_API_KEY;\nconst API_URL=process.env.REACT_APP_TMDB_API_URL;\n\nconst MovieListPage = ({type}) => {\n    const [movies, setMovies] = useState([]);\n    const [filteredMovies, setFilteredMovies] = useState([]);\n    const [filterTerm, setFilterTerm] = useState('');\n    const [latestMovies, setLatestMovies] = useState([]);\n    const [totalResults, setTotalResults]= useState(1);\n    const [pageNum, setPageNum] = useState(1);\n    const [ratingRange, setRatingRange] = useState({min: 0,max: 10})\n    const [yearRange, setYearRange] = useState({min: 1997,max: 2021})\n    const [genresList, setGenresList] = useState([]);\n    const [hasGenresList, setHasGenresList] = useState(false);\n    const [selectedGenre, setSelectedGenre] = useState(0);\n    const [sortType, setSortType] = useState('mostToLeastPopular');\n\n\n    useEffect(()=>{\n        async function fetchGenresList() {\n            const url = `${API_URL}/genre/movie/list?api_key=${API_KEY}&language=en-US`;\n            const response = await fetch(url);\n            const data = await response.json();\n            setGenresList(data.genres)\n            setHasGenresList(true)\n          };\n          fetchGenresList();\n    },[])\n\n    useEffect(() => {\n        async function fetchData() {\n          let endpoint = \"now_playing\";\n          if(type === 'top_rated'){\n              endpoint = 'top_rated';\n          }\n          if(type === 'upcoming'){\n            endpoint = 'upcoming';\n          }\n          const url = `${API_URL}/movie/${endpoint}?api_key=${API_KEY}&page=${pageNum}`;\n          const response = await fetch(url);\n          const data = await response.json();\n          setMovies(data.results);\n          setFilteredMovies(data.results);\n          setTotalResults(data.total_results)\n          setSelectedGenre(0);\n          if(hasGenresList){\n            let copyList = [...genresList]\n            copyList = copyList.map(g => ({...g, count: 0}))\n              data.results.forEach(d => {\n                d.genre_ids.forEach(g => {\n                    copyList.forEach(l => {\n                        if(g === l.id){\n                            l.count = l.count + 1;\n                        }\n                    })\n                }\n                )\n              })\n            setGenresList(copyList);\n          }\n        };\n        fetchData();\n      }, [type,pageNum,hasGenresList]);\n\n  \n    useEffect(()=>{\n        async function fetchData() {\n            const url = `${API_URL}/movie/popular?api_key=${API_KEY}&language=en-US&page=1`;\n            const response = await fetch(url);\n            const data = await response.json();\n            setLatestMovies(data.results.slice(0,3));\n            if(type==='top_rated'){\n                setLatestMovies(data.results.slice(4,7));\n            }\n            if(type==='upcoming'){\n                setLatestMovies(data.results.slice(8,11));\n            }\n          };\n          fetchData();\n    },[type])\n\n\n    useEffect(()=>{\n        let newMovies = movies.filter((m)=>m.title.toLowerCase().startsWith(filterTerm.toLowerCase()));\n        setFilteredMovies(newMovies);\n    },[filterTerm, movies])\n\n    useEffect(()=>{\n        let newMovies = movies.filter((m)=>(m.vote_average>=ratingRange.min && m.vote_average<=ratingRange.max));\n        setFilteredMovies(newMovies);\n    },[ratingRange, movies])\n\n    useEffect(()=>{\n        let newMovies = movies.filter((m)=>{\n            let year = m.release_date.split(\"-\")[0];\n            return (year>=yearRange.min && year <= yearRange.max)\n        });\n        setFilteredMovies(newMovies);\n    },[yearRange, movies])\n\n    useEffect(()=>{\n        if(parseInt(selectedGenre) !== 0){\n            const newMovies = movies.filter(m => m.genre_ids.includes(parseInt(selectedGenre)));\n            setFilteredMovies(newMovies)\n        }\n        else{\n            setFilteredMovies(movies)\n        }\n    },[selectedGenre,movies])\n\n    useEffect(()=>{\n        let copyMovies = [...movies]\n        switch(sortType){\n            case 'leastToMostPopular':\n                copyMovies.sort((a,b)=>a.popularity-b.popularity);\n                break;\n            case 'highestToLowestRating':\n                copyMovies.sort((a,b) => b.vote_average - a.vote_average);\n                break;\n            case 'lowestToHighestRating':\n                copyMovies.sort((a,b) => a.vote_average - b.vote_average);\n                break;\n            default:\n                break;\n        }\n        setFilteredMovies(copyMovies);\n    },[sortType,movies])\n    \n\n    const handleChangePage=(page)=>{\n        setPageNum(page);\n    }\n    const handleClickGenre=(e)=>{\n        setSelectedGenre(e.currentTarget.value);\n    }\n    const handleSelectSort=(e)=>{\n        setSortType(e);\n    }\n    return (\n        <>\n            <PublicNavbar handleChange={(e)=>setFilterTerm(e.target.value)} value={filterTerm}/>\n            <CarouselMovie movies={latestMovies}/>\n            <Container fluid className=\"movie-body\">\n            <PaginationBar totalResults={totalResults} currentPage={pageNum} clicked={handleChangePage} handleSelect={handleSelectSort}/>\n            <Row>\n                <Col md={3} className=\"px-5\">\n                    {hasGenresList && <GenreCheckBox genresList={genresList} handleClickGenre={handleClickGenre}/>}\n                    <Row className=\"mb-5\">\n                        <h4 className=\"my-4 text-warning\">Rating</h4>\n                        <InputRange draggableTrack maxValue={10} minValue={0} value={ratingRange} onChange={value => setRatingRange(value)}/>\n                    </Row>\n\n                    <Row className=\"mt-5\">\n                        <h4 className=\"my-4 text-warning\">Year</h4>\n                        <InputRange maxValue={2021} minValue={1997} value={yearRange} onChange={value => setYearRange(value)}/>\n                    </Row>\n                </Col>\n                <Col md={9}>\n                <Row>\n                    <CardDeck>\n                        {filteredMovies.map(m=>(<MovieCard movies = {m} key={m.id} genres={genresList}/>))}\n                    </CardDeck>\n                </Row>\n                </Col>\n            </Row>\n            </Container>\n            \n            \n        </>\n    )\n}\n\nexport default MovieListPage\n","/Volumes/Data/coderSchool/myReact/movie/src/pages/MovieDetailPage.js",["63","64"],"/Volumes/Data/coderSchool/myReact/movie/src/components/MovieDetail.js",[],"/Volumes/Data/coderSchool/myReact/movie/src/components/MovieCard.js",[],"/Volumes/Data/coderSchool/myReact/movie/src/components/GenreCheckBox.js",[],"/Volumes/Data/coderSchool/myReact/movie/src/components/CarouselMovie.js",[],"/Volumes/Data/coderSchool/myReact/movie/src/components/PublicNavbar.js",[],"/Volumes/Data/coderSchool/myReact/movie/src/components/PaginationBar.js",[],"/Volumes/Data/coderSchool/myReact/movie/src/components/ModalReviews.js",[],"/Volumes/Data/coderSchool/myReact/movie/src/components/NavBar.js",[],"/Volumes/Data/coderSchool/myReact/movie/src/components/CarouselMulti.js",[],{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":74,"column":10,"nodeType":"71","endLine":74,"endColumn":38,"suggestions":"72"},{"ruleId":"73","severity":1,"message":"74","line":17,"column":10,"nodeType":"75","messageId":"76","endLine":17,"endColumn":18},{"ruleId":"69","severity":1,"message":"77","line":65,"column":6,"nodeType":"71","endLine":65,"endColumn":8,"suggestions":"78"},"no-native-reassign",["79"],"no-negated-in-lhs",["80"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'genresList'. Either include it or remove the dependency array.","ArrayExpression",["81"],"no-unused-vars","'hasError' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'id' and 'ids.length'. Either include them or remove the dependency array.",["82"],"no-global-assign","no-unsafe-negation",{"desc":"83","fix":"84"},{"desc":"85","fix":"86"},"Update the dependencies array to be: [type, pageNum, hasGenresList, genresList]",{"range":"87","text":"88"},"Update the dependencies array to be: [id, ids.length]",{"range":"89","text":"90"},[2842,2870],"[type, pageNum, hasGenresList, genresList]",[2037,2039],"[id, ids.length]"]